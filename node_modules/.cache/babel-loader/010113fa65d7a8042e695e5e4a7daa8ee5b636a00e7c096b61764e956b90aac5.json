{"ast":null,"code":"import axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: '/ng'\n});\n\n// 添加请求拦截器\napiClient.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  console.log('Sending request:', config.method.toUpperCase(), config.url);\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\napiClient.interceptors.response.use(function (response) {\n  // 对响应数据做点什么\n  console.log('Received response:', response.status, response.config.url);\n  return response;\n}, function (error) {\n  // 对响应错误做点什么\n  console.error('API error:', error.response ? error.response.status : 'Network Error', error.config.url);\n  return Promise.reject(error);\n});\nexport const transitServerApi = {\n  getChatContent: data => apiClient.post('/transit-server/get_chat_content', data),\n  getFileContent: data => apiClient.post('/transit-server/get_file_content', data),\n  getTrainData: data => apiClient.post('/transit-server/get_train_data', data),\n  cancel: data => apiClient.post('/transit-server/cancel', data)\n};\nexport const cloudDriveApi = {\n  getInitialFileSystem: () => apiClient.get('/cloud-drive-service/api/initialFileSystem'),\n  saveFile: data => apiClient.post('/cloud-drive-service/api/saveFile', data),\n  createFile: data => apiClient.post('/cloud-drive-service/api/createFile', data),\n  deleteFile: fileId => apiClient.post('/cloud-drive-service/api/deleteFile', {\n    fileId\n  }),\n  getFileContent: fileId => apiClient.get(`/cloud-drive-service/api/getFileContent?fileId=${fileId}`)\n};\n\n// 统一的错误处理函数\nexport const handleApiError = error => {\n  if (error.response) {\n    // 请求已发出，但服务器响应的状态码不在 2xx 范围内\n    console.error('API Error:', error.response.status, error.response.data);\n    throw new Error(error.response.data.message || 'An error occurred');\n  } else if (error.request) {\n    // 请求已发出，但没有收到响应\n    console.error('API Error: No response received');\n    throw new Error('No response received from server');\n  } else {\n    // 发送请求时出了点问题\n    console.error('API Error:', error.message);\n    throw new Error('Error sending request');\n  }\n};\n\n// 使用示例：\n// try {\n//   const response = await cloudDriveApi.deleteFile(fileId);\n//   // 处理成功响应\n// } catch (error) {\n//   handleApiError(error);\n// }","map":{"version":3,"names":["axios","apiClient","create","baseURL","interceptors","request","use","config","console","log","method","toUpperCase","url","error","Promise","reject","response","status","transitServerApi","getChatContent","data","post","getFileContent","getTrainData","cancel","cloudDriveApi","getInitialFileSystem","get","saveFile","createFile","deleteFile","fileId","handleApiError","Error","message"],"sources":["/Users/huluobo/Github_Content/Project-Code/src/apiClient.js"],"sourcesContent":["import axios from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: '/ng',\n});\n\n// 添加请求拦截器\napiClient.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  console.log('Sending request:', config.method.toUpperCase(), config.url);\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\napiClient.interceptors.response.use(function (response) {\n  // 对响应数据做点什么\n  console.log('Received response:', response.status, response.config.url);\n  return response;\n}, function (error) {\n  // 对响应错误做点什么\n  console.error('API error:', error.response ? error.response.status : 'Network Error', error.config.url);\n  return Promise.reject(error);\n});\n\nexport const transitServerApi = {\n  getChatContent: (data) => apiClient.post('/transit-server/get_chat_content', data),\n  getFileContent: (data) => apiClient.post('/transit-server/get_file_content', data),\n  getTrainData: (data) => apiClient.post('/transit-server/get_train_data', data),\n  cancel: (data) => apiClient.post('/transit-server/cancel', data),\n};\n\nexport const cloudDriveApi = {\n  getInitialFileSystem: () => \n    apiClient.get('/cloud-drive-service/api/initialFileSystem'),\n\n  saveFile: (data) => \n    apiClient.post('/cloud-drive-service/api/saveFile', data),\n\n  createFile: (data) => \n    apiClient.post('/cloud-drive-service/api/createFile', data),\n\n  deleteFile: (fileId) => \n    apiClient.post('/cloud-drive-service/api/deleteFile', { fileId }),\n\n  getFileContent: (fileId) => \n    apiClient.get(`/cloud-drive-service/api/getFileContent?fileId=${fileId}`),\n};\n\n// 统一的错误处理函数\nexport const handleApiError = (error) => {\n  if (error.response) {\n    // 请求已发出，但服务器响应的状态码不在 2xx 范围内\n    console.error('API Error:', error.response.status, error.response.data);\n    throw new Error(error.response.data.message || 'An error occurred');\n  } else if (error.request) {\n    // 请求已发出，但没有收到响应\n    console.error('API Error: No response received');\n    throw new Error('No response received from server');\n  } else {\n    // 发送请求时出了点问题\n    console.error('API Error:', error.message);\n    throw new Error('Error sending request');\n  }\n};\n\n// 使用示例：\n// try {\n//   const response = await cloudDriveApi.deleteFile(fileId);\n//   // 处理成功响应\n// } catch (error) {\n//   handleApiError(error);\n// }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}