{"ast":null,"code":"import axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: '/ng'\n});\n\n// Add request interceptor\napiClient.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  console.log('Sending request:', config.method.toUpperCase(), config.url);\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor\napiClient.interceptors.response.use(function (response) {\n  // Do something with response data\n  console.log('Received response:', response.status, response.config.url);\n  return response;\n}, function (error) {\n  // Do something with response error\n  console.error('API error:', error.response ? error.response.status : 'Network Error', error.config.url);\n  return Promise.reject(error);\n});\n\n// Unified error handling function\nconst handleApiError = error => {\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    console.error('API Error:', error.response.status, error.response.data);\n    throw new Error(error.response.data.message || 'An error occurred');\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('API Error: No response received');\n    throw new Error('No response received from server');\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.error('API Error:', error.message);\n    throw new Error('Error sending request');\n  }\n};\n\n// Helper function to wrap API calls with error handling\nconst withErrorHandling = apiCall => {\n  return async (...args) => {\n    try {\n      const response = await apiCall(...args);\n      return response.data;\n    } catch (error) {\n      handleApiError(error);\n    }\n  };\n};\nexport const transitServerApi = {\n  getChatContent: withErrorHandling(data => apiClient.post('/transit-server/get_chat_content', data)),\n  getFileContent: withErrorHandling(data => apiClient.post('/transit-server/get_file_content', data)),\n  getTrainData: withErrorHandling(data => apiClient.post('/transit-server/get_train_data', data)),\n  cancel: withErrorHandling(data => apiClient.post('/transit-server/cancel', data))\n};\nexport const cloudDriveApi = {\n  getInitialFileSystem: withErrorHandling(() => apiClient.get('/cloud-drive-service/api/initialFileSystem')),\n  saveFile: withErrorHandling(data => apiClient.post('/cloud-drive-service/api/saveFile', data)),\n  createFile: withErrorHandling(data => apiClient.post('/cloud-drive-service/api/createFile', data)),\n  deleteFile: withErrorHandling(fileId => apiClient.post('/cloud-drive-service/api/deleteFile', {\n    fileId\n  })),\n  getFileContent: withErrorHandling(fileId => apiClient.get(`/cloud-drive-service/api/getFileContent?fileId=${fileId}`))\n};\nexport { handleApiError };\n\n// Usage example:\n// try {\n//   const result = await cloudDriveApi.deleteFile(fileId);\n//   // Handle successful response\n// } catch (error) {\n//   // Error is already logged and handled by withErrorHandling\n//   // You can add additional error handling here if needed\n// }","map":{"version":3,"names":["axios","apiClient","create","baseURL","interceptors","request","use","config","console","log","method","toUpperCase","url","error","Promise","reject","response","status","handleApiError","data","Error","message","withErrorHandling","apiCall","args","transitServerApi","getChatContent","post","getFileContent","getTrainData","cancel","cloudDriveApi","getInitialFileSystem","get","saveFile","createFile","deleteFile","fileId"],"sources":["/Users/huluobo/Github_Content/Project-Code/src/apiClient.js"],"sourcesContent":["import axios from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: '/ng',\n});\n\n// Add request interceptor\napiClient.interceptors.request.use(function (config) {\n  // Do something before request is sent\n  console.log('Sending request:', config.method.toUpperCase(), config.url);\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor\napiClient.interceptors.response.use(function (response) {\n  // Do something with response data\n  console.log('Received response:', response.status, response.config.url);\n  return response;\n}, function (error) {\n  // Do something with response error\n  console.error('API error:', error.response ? error.response.status : 'Network Error', error.config.url);\n  return Promise.reject(error);\n});\n\n// Unified error handling function\nconst handleApiError = (error) => {\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    console.error('API Error:', error.response.status, error.response.data);\n    throw new Error(error.response.data.message || 'An error occurred');\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('API Error: No response received');\n    throw new Error('No response received from server');\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.error('API Error:', error.message);\n    throw new Error('Error sending request');\n  }\n};\n\n// Helper function to wrap API calls with error handling\nconst withErrorHandling = (apiCall) => {\n  return async (...args) => {\n    try {\n      const response = await apiCall(...args);\n      return response.data;\n    } catch (error) {\n      handleApiError(error);\n    }\n  };\n};\n\nexport const transitServerApi = {\n  getChatContent: withErrorHandling((data) => apiClient.post('/transit-server/get_chat_content', data)),\n  getFileContent: withErrorHandling((data) => apiClient.post('/transit-server/get_file_content', data)),\n  getTrainData: withErrorHandling((data) => apiClient.post('/transit-server/get_train_data', data)),\n  cancel: withErrorHandling((data) => apiClient.post('/transit-server/cancel', data)),\n};\n\nexport const cloudDriveApi = {\n  getInitialFileSystem: withErrorHandling(() => \n    apiClient.get('/cloud-drive-service/api/initialFileSystem')),\n\n  saveFile: withErrorHandling((data) => \n    apiClient.post('/cloud-drive-service/api/saveFile', data)),\n\n  createFile: withErrorHandling((data) => \n    apiClient.post('/cloud-drive-service/api/createFile', data)),\n\n  deleteFile: withErrorHandling((fileId) => \n    apiClient.post('/cloud-drive-service/api/deleteFile', { fileId })),\n\n  getFileContent: withErrorHandling((fileId) => \n    apiClient.get(`/cloud-drive-service/api/getFileContent?fileId=${fileId}`)),\n};\n\nexport { handleApiError };\n\n// Usage example:\n// try {\n//   const result = await cloudDriveApi.deleteFile(fileId);\n//   // Handle successful response\n// } catch (error) {\n//   // Error is already logged and handled by withErrorHandling\n//   // You can add additional error handling here if needed\n// }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}