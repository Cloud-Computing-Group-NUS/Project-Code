{"ast":null,"code":"// import React, { useState } from 'react';\n// import { Folder, File, PlusCircle, Trash2, FolderPlus } from 'lucide-react';\n\n// const FileTree = ({ files, onSelectFile, onCreateFile, onDeleteFile, selectedFileId }) => {\n//   const [newItemName, setNewItemName] = useState('');\n//   const [expandedFolders, setExpandedFolders] = useState(() => {\n//     const stored = localStorage.getItem('expandedFolders');\n//     return stored ? JSON.parse(stored) : { root: true };\n//   });\n//   const [showNewItemInput, setShowNewItemInput] = useState({ root: true });\n\n//   const toggleFolder = (id) => {\n//     setExpandedFolders(prev => {\n//       const updated = { ...prev, [id]: !prev[id] };\n//       localStorage.setItem('expandedFolders', JSON.stringify(updated));\n//       return updated;\n//     });\n//   };\n\n//   const handleCreateItem = (parentId, isFolder = false) => {\n//     if (newItemName.trim()) {\n//       onCreateFile(parentId, newItemName.trim(), isFolder);\n//       setNewItemName('');\n//       setShowNewItemInput(prev => ({ ...prev, [parentId]: false }));\n//     }\n//   };\n\n//   const handleKeyPress = (e, parentId, isFolder = false) => {\n//     if (e.key === 'Enter') {\n//       handleCreateItem(parentId, isFolder);\n//     }\n//   };\n\n//   const handleDeleteItem = (id, items) => {\n//     return items.filter(item => {\n//       if (item.id === id) {\n//         return false;\n//       } else if (item.children) {\n//         item.children = handleDeleteItem(id, item.children);\n//       }\n//       return true;\n//     });\n//   };\n\n//   const renderNewItemInput = (parentId) => (\n//     <div className=\"flex items-center mb-2\">\n//       <input\n//         type=\"text\"\n//         value={newItemName}\n//         onChange={(e) => setNewItemName(e.target.value)}\n//         onKeyPress={(e) => handleKeyPress(e, parentId)}\n//         className=\"p-1 border rounded mr-2 text-sm flex-grow\"\n//         placeholder=\"New item name\"\n//       />\n//       <button\n//         onClick={() => handleCreateItem(parentId)}\n//         className=\"p-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-300 mr-1\"\n//       >\n//         <File size={16} />\n//       </button>\n//       <button\n//         onClick={() => handleCreateItem(parentId, true)}\n//         className=\"p-1 bg-yellow-500 text-white rounded hover:bg-yellow-600 transition duration-300\"\n//       >\n//         <FolderPlus size={16} />\n//       </button>\n//     </div>\n//   );\n\n//   const renderTree = (items, parentId = 'root') => {\n//     // items: 文件和文件夹(FileSystem)的数组\n//     // parentId: 父节点的 ID，默认为 root\n//     if (items.length === 0 && parentId === 'root') { // 文件系统初始化 (Drive is empty) -> initialFileSystem()\n//       return (\n//         <li key=\"new-item-input\" className=\"py-1\">\n//           {renderNewItemInput('root')}\n//         </li>\n//       ); // 包含新建项输入框的列表项\n//     }\n\n//     return items.map((item) => (\n//       <li key={item.id} className=\"py-1\">\n//         {item.type === 'folder' ? (\n//           <div>\n//             <div className=\"flex items-center\">\n//               <div \n//                 className=\"flex items-center cursor-pointer flex-grow\" \n//                 onClick={() => toggleFolder(item.id)}\n//               >\n//                 <Folder size={16} className=\"mr-2 text-yellow-500\" />\n//                 <span className=\"text-gray-800\">{item.name}</span>\n//               </div>\n//               <button\n//                 onClick={() => setShowNewItemInput(prev => ({ ...prev, [item.id]: !prev[item.id] }))}\n//                 className=\"p-1 text-green-500 rounded hover:bg-green-100 transition duration-300 mr-1\"\n//               >\n//                 <PlusCircle size={16} />\n//               </button>\n//               {/* {parentId !== 'root' && ( */}\n//               {(\n//                 <button\n//                   onClick={() => {\n//                     const updatedFiles = handleDeleteItem(item.id, files);\n//                     onDeleteFile(item.id); // triggers the actual delete logic on the parent component\n//                   }}\n//                   className=\"p-1 text-red-500 rounded hover:bg-red-100 transition duration-300\"\n//                 >\n//                   <Trash2 size={16} />\n//                 </button>\n//               )}\n//             </div>\n//             {expandedFolders[item.id] && (\n//               <div className=\"ml-4 mt-2\">\n//                 {showNewItemInput[item.id] && renderNewItemInput(item.id)}\n//                 <ul className=\"pl-4\">\n//                   {item.children && item.children.length > 0 \n//                     ? renderTree(item.children, item.id)\n//                     : <li className=\"text-gray-500 italic\">Empty folder</li>\n//                   }\n//                 </ul>\n//               </div>\n//             )}\n//           </div>\n//         ) : (\n//           <div className={`flex items-center ${selectedFileId === item.id ? 'bg-blue-100' : ''}`}>\n//             <div \n//               className=\"flex items-center cursor-pointer flex-grow p-1 rounded\"\n//               onClick={() => onSelectFile(item)}\n//             >\n//               <File size={16} className=\"mr-2 text-blue-500\" />\n//               <span className=\"text-gray-800\">{item.name}</span>\n//             </div>\n//             <button\n//               onClick={() => onDeleteFile(item.id)}\n//               className=\"p-1 text-red-500 rounded hover:bg-red-100 transition duration-300\"\n//             >\n//               <Trash2 size={16} />\n//             </button>\n//           </div>\n//         )}\n//       </li>\n//     ));\n//   };\n\n//   return (\n//     <div className=\"file-tree\">\n//       <ul className=\"pl-4\">\n//         {renderTree(files)}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default FileTree;","map":{"version":3,"names":[],"sources":["/Users/huluobo/Github_Content/Project-Code/src/components/FileTree.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { Folder, File, PlusCircle, Trash2, FolderPlus } from 'lucide-react';\n\n// const FileTree = ({ files, onSelectFile, onCreateFile, onDeleteFile, selectedFileId }) => {\n//   const [newItemName, setNewItemName] = useState('');\n//   const [expandedFolders, setExpandedFolders] = useState(() => {\n//     const stored = localStorage.getItem('expandedFolders');\n//     return stored ? JSON.parse(stored) : { root: true };\n//   });\n//   const [showNewItemInput, setShowNewItemInput] = useState({ root: true });\n\n//   const toggleFolder = (id) => {\n//     setExpandedFolders(prev => {\n//       const updated = { ...prev, [id]: !prev[id] };\n//       localStorage.setItem('expandedFolders', JSON.stringify(updated));\n//       return updated;\n//     });\n//   };\n\n//   const handleCreateItem = (parentId, isFolder = false) => {\n//     if (newItemName.trim()) {\n//       onCreateFile(parentId, newItemName.trim(), isFolder);\n//       setNewItemName('');\n//       setShowNewItemInput(prev => ({ ...prev, [parentId]: false }));\n//     }\n//   };\n\n//   const handleKeyPress = (e, parentId, isFolder = false) => {\n//     if (e.key === 'Enter') {\n//       handleCreateItem(parentId, isFolder);\n//     }\n//   };\n\n//   const handleDeleteItem = (id, items) => {\n//     return items.filter(item => {\n//       if (item.id === id) {\n//         return false;\n//       } else if (item.children) {\n//         item.children = handleDeleteItem(id, item.children);\n//       }\n//       return true;\n//     });\n//   };\n\n//   const renderNewItemInput = (parentId) => (\n//     <div className=\"flex items-center mb-2\">\n//       <input\n//         type=\"text\"\n//         value={newItemName}\n//         onChange={(e) => setNewItemName(e.target.value)}\n//         onKeyPress={(e) => handleKeyPress(e, parentId)}\n//         className=\"p-1 border rounded mr-2 text-sm flex-grow\"\n//         placeholder=\"New item name\"\n//       />\n//       <button\n//         onClick={() => handleCreateItem(parentId)}\n//         className=\"p-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-300 mr-1\"\n//       >\n//         <File size={16} />\n//       </button>\n//       <button\n//         onClick={() => handleCreateItem(parentId, true)}\n//         className=\"p-1 bg-yellow-500 text-white rounded hover:bg-yellow-600 transition duration-300\"\n//       >\n//         <FolderPlus size={16} />\n//       </button>\n//     </div>\n//   );\n\n//   const renderTree = (items, parentId = 'root') => {\n//     // items: 文件和文件夹(FileSystem)的数组\n//     // parentId: 父节点的 ID，默认为 root\n//     if (items.length === 0 && parentId === 'root') { // 文件系统初始化 (Drive is empty) -> initialFileSystem()\n//       return (\n//         <li key=\"new-item-input\" className=\"py-1\">\n//           {renderNewItemInput('root')}\n//         </li>\n//       ); // 包含新建项输入框的列表项\n//     }\n\n//     return items.map((item) => (\n//       <li key={item.id} className=\"py-1\">\n//         {item.type === 'folder' ? (\n//           <div>\n//             <div className=\"flex items-center\">\n//               <div \n//                 className=\"flex items-center cursor-pointer flex-grow\" \n//                 onClick={() => toggleFolder(item.id)}\n//               >\n//                 <Folder size={16} className=\"mr-2 text-yellow-500\" />\n//                 <span className=\"text-gray-800\">{item.name}</span>\n//               </div>\n//               <button\n//                 onClick={() => setShowNewItemInput(prev => ({ ...prev, [item.id]: !prev[item.id] }))}\n//                 className=\"p-1 text-green-500 rounded hover:bg-green-100 transition duration-300 mr-1\"\n//               >\n//                 <PlusCircle size={16} />\n//               </button>\n//               {/* {parentId !== 'root' && ( */}\n//               {(\n//                 <button\n//                   onClick={() => {\n//                     const updatedFiles = handleDeleteItem(item.id, files);\n//                     onDeleteFile(item.id); // triggers the actual delete logic on the parent component\n//                   }}\n//                   className=\"p-1 text-red-500 rounded hover:bg-red-100 transition duration-300\"\n//                 >\n//                   <Trash2 size={16} />\n//                 </button>\n//               )}\n//             </div>\n//             {expandedFolders[item.id] && (\n//               <div className=\"ml-4 mt-2\">\n//                 {showNewItemInput[item.id] && renderNewItemInput(item.id)}\n//                 <ul className=\"pl-4\">\n//                   {item.children && item.children.length > 0 \n//                     ? renderTree(item.children, item.id)\n//                     : <li className=\"text-gray-500 italic\">Empty folder</li>\n//                   }\n//                 </ul>\n//               </div>\n//             )}\n//           </div>\n//         ) : (\n//           <div className={`flex items-center ${selectedFileId === item.id ? 'bg-blue-100' : ''}`}>\n//             <div \n//               className=\"flex items-center cursor-pointer flex-grow p-1 rounded\"\n//               onClick={() => onSelectFile(item)}\n//             >\n//               <File size={16} className=\"mr-2 text-blue-500\" />\n//               <span className=\"text-gray-800\">{item.name}</span>\n//             </div>\n//             <button\n//               onClick={() => onDeleteFile(item.id)}\n//               className=\"p-1 text-red-500 rounded hover:bg-red-100 transition duration-300\"\n//             >\n//               <Trash2 size={16} />\n//             </button>\n//           </div>\n//         )}\n//       </li>\n//     ));\n//   };\n\n//   return (\n//     <div className=\"file-tree\">\n//       <ul className=\"pl-4\">\n//         {renderTree(files)}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default FileTree;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}