{"ast":null,"code":"var _jsxFileName = \"/Users/huluobo/Github_Content/Project-Code/src/components/FileTree.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { Folder, File, PlusCircle, Trash2, FolderPlus } from 'lucide-react';\n\n// const FileTree = ({ files, onSelectFile, onCreateFile, onDeleteFile, selectedFileId }) => {\n//   const [newItemName, setNewItemName] = useState(''); // 存储新创建的文件或文件夹的名称\n//   const [expandedFolders, setExpandedFolders] = useState({ root: true }); // 存储已展开的文件夹的状态，默认情况下根文件夹是展开的\n//   const [showNewItemInput, setShowNewItemInput] = useState({ root: true }); // 默认显示根节点的新建输入框\n\n//   const toggleFolder = (id) => { // 切换文件夹的展开/折叠状态\n//     setExpandedFolders(prev => ({ ...prev, [id]: !prev[id] }));\n//   };\n\n//   const handleCreateItem = (parentId, isFolder = false) => {\n//     // 处理新文件或文件夹的创建: 它接收父节点的 parentId 和一个布尔值 isFolder 表示是否创建文件夹\n//     if (newItemName.trim()) {\n//       onCreateFile(parentId, newItemName.trim(), isFolder);\n//       setNewItemName('');\n//       setShowNewItemInput(prev => ({ ...prev, [parentId]: false }));\n//     }\n//   };\n\n//   const handleKeyPress = (e, parentId, isFolder = false) => {\n//     // 处理输入框的键盘事件。当用户按下 Enter 键时，调用 handleCreateItem 函数创建新项目\n//     if (e.key === 'Enter') {\n//       handleCreateItem(parentId, isFolder);\n//     }\n//   };\n\n//   const renderNewItemInput = (parentId) => (\n//     // 渲染新建项目的输入框\n//     // 输入框允许用户输入新项目的名称，并提供两个按钮：创建file / 创建folder\n//     <div className=\"flex items-center mb-2\">\n//       <input\n//         type=\"text\"\n//         value={newItemName}\n//         onChange={(e) => setNewItemName(e.target.value)}\n//         onKeyPress={(e) => handleKeyPress(e, parentId)}\n//         className=\"p-1 border rounded mr-2 text-sm flex-grow\"\n//         placeholder=\"New item name\"\n//       />\n//       <button\n//         onClick={() => handleCreateItem(parentId)}\n//         className=\"p-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-300 mr-1\"\n//       >\n//         <File size={16} />\n//       </button>\n//       <button\n//         onClick={() => handleCreateItem(parentId, true)}\n//         className=\"p-1 bg-yellow-500 text-white rounded hover:bg-yellow-600 transition duration-300\"\n//       >\n//         <FolderPlus size={16} />\n//       </button>\n//     </div>\n//   );\n\n//   const renderTree = (items, parentId = 'root') => {\n//     // 递归地渲染文件和文件夹的层次结构\n//     if (items.length === 0 && parentId === 'root') {\n//       // 如果根节点没有子项，则显示新建项目的输入框\n//       return (\n//         <li key=\"new-item-input\" className=\"py-1\">\n//           {renderNewItemInput('root')}\n//         </li>\n//       );\n//     }\n\n//     // 对于每个项目，检查其类型是文件夹还是文件，并分别渲染相应的内容：\n//     // (1) 文件夹，渲染展开/折叠按钮和新建按钮；\n//     // (2) 文件，渲染选择和删除按钮\n//     return items.map((item) => (\n//       <li key={item.id} className=\"py-1\">\n//         {item.type === 'folder' ? (\n//           <div>\n//             <div className=\"flex items-center\">\n//               <div \n//                 className=\"flex items-center cursor-pointer flex-grow\" \n//                 onClick={() => toggleFolder(item.id)}\n//               >\n//                 <Folder size={16} className=\"mr-2 text-yellow-500\" />\n//                 <span className=\"text-gray-800\">{item.name}</span>\n//               </div>\n//               <button\n//                 onClick={() => setShowNewItemInput(prev => ({ ...prev, [item.id]: !prev[item.id] }))}\n//                 className=\"p-1 text-green-500 rounded hover:bg-green-100 transition duration-300 mr-1\"\n//               >\n//                 <PlusCircle size={16} />\n//               </button>\n//               {parentId !== 'root' && (\n//                 <button\n//                   onClick={() => onDeleteFile(item.id)}\n//                   className=\"p-1 text-red-500 rounded hover:bg-red-100 transition duration-300\"\n//                 >\n//                   <Trash2 size={16} />\n//                 </button>\n//               )}\n//             </div>\n//             {expandedFolders[item.id] && (\n//               <div className=\"ml-4 mt-2\">\n//                 {showNewItemInput[item.id] && renderNewItemInput(item.id)}\n//                 <ul className=\"pl-4\">\n//                   {item.children && item.children.length > 0 \n//                     ? renderTree(item.children, item.id)\n//                     : <li className=\"text-gray-500 italic\">Empty folder</li>\n//                   }\n//                 </ul>\n//               </div>\n//             )}\n//           </div>\n//         ) : (\n//           <div className={`flex items-center ${selectedFileId === item.id ? 'bg-blue-100' : ''}`}>\n//             <div \n//               className=\"flex items-center cursor-pointer flex-grow p-1 rounded\"\n//               onClick={() => onSelectFile(item)}\n//             >\n//               <File size={16} className=\"mr-2 text-blue-500\" />\n//               <span className=\"text-gray-800\">{item.name}</span>\n//             </div>\n//             <button\n//               onClick={() => onDeleteFile(item.id)}\n//               className=\"p-1 text-red-500 rounded hover:bg-red-100 transition duration-300\"\n//             >\n//               <Trash2 size={16} />\n//             </button>\n//           </div>\n//         )}\n//       </li>\n//     ));\n//   };\n\n//   return (\n//     <div className=\"file-tree\">\n//       <ul className=\"pl-4\">\n//         {renderTree(files)}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default FileTree;\n\n// FileTree.js\n\nimport React, { useState } from 'react';\nimport { Folder, File, PlusCircle, Trash2, FolderPlus } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileTree = ({\n  files,\n  onSelectFile,\n  onCreateFile,\n  onDeleteFile,\n  selectedFileId\n}) => {\n  _s();\n  const [newItemName, setNewItemName] = useState('');\n  const [expandedFolders, setExpandedFolders] = useState(() => {\n    // Initialize expandedFolders from localStorage, defaulting to { root: true }\n    const stored = localStorage.getItem('expandedFolders');\n    return stored ? JSON.parse(stored) : {\n      root: true\n    };\n  });\n  const [showNewItemInput, setShowNewItemInput] = useState({\n    root: true\n  });\n  const toggleFolder = id => {\n    setExpandedFolders(prev => {\n      const updated = {\n        ...prev,\n        [id]: !prev[id]\n      };\n      // Persist expanded folders state to localStorage\n      localStorage.setItem('expandedFolders', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // ... (rest of the FileTree.js code remains the same)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-tree\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"pl-4\",\n      children: renderTree(files)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(FileTree, \"RFpZXewCjU7jCTxi6P7vIrFCB2E=\");\n_c = FileTree;\nexport default FileTree;\nvar _c;\n$RefreshReg$(_c, \"FileTree\");","map":{"version":3,"names":["React","useState","Folder","File","PlusCircle","Trash2","FolderPlus","jsxDEV","_jsxDEV","FileTree","files","onSelectFile","onCreateFile","onDeleteFile","selectedFileId","_s","newItemName","setNewItemName","expandedFolders","setExpandedFolders","stored","localStorage","getItem","JSON","parse","root","showNewItemInput","setShowNewItemInput","toggleFolder","id","prev","updated","setItem","stringify","className","children","renderTree","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/huluobo/Github_Content/Project-Code/src/components/FileTree.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { Folder, File, PlusCircle, Trash2, FolderPlus } from 'lucide-react';\n\n// const FileTree = ({ files, onSelectFile, onCreateFile, onDeleteFile, selectedFileId }) => {\n//   const [newItemName, setNewItemName] = useState(''); // 存储新创建的文件或文件夹的名称\n//   const [expandedFolders, setExpandedFolders] = useState({ root: true }); // 存储已展开的文件夹的状态，默认情况下根文件夹是展开的\n//   const [showNewItemInput, setShowNewItemInput] = useState({ root: true }); // 默认显示根节点的新建输入框\n\n//   const toggleFolder = (id) => { // 切换文件夹的展开/折叠状态\n//     setExpandedFolders(prev => ({ ...prev, [id]: !prev[id] }));\n//   };\n\n//   const handleCreateItem = (parentId, isFolder = false) => {\n//     // 处理新文件或文件夹的创建: 它接收父节点的 parentId 和一个布尔值 isFolder 表示是否创建文件夹\n//     if (newItemName.trim()) {\n//       onCreateFile(parentId, newItemName.trim(), isFolder);\n//       setNewItemName('');\n//       setShowNewItemInput(prev => ({ ...prev, [parentId]: false }));\n//     }\n//   };\n\n//   const handleKeyPress = (e, parentId, isFolder = false) => {\n//     // 处理输入框的键盘事件。当用户按下 Enter 键时，调用 handleCreateItem 函数创建新项目\n//     if (e.key === 'Enter') {\n//       handleCreateItem(parentId, isFolder);\n//     }\n//   };\n\n//   const renderNewItemInput = (parentId) => (\n//     // 渲染新建项目的输入框\n//     // 输入框允许用户输入新项目的名称，并提供两个按钮：创建file / 创建folder\n//     <div className=\"flex items-center mb-2\">\n//       <input\n//         type=\"text\"\n//         value={newItemName}\n//         onChange={(e) => setNewItemName(e.target.value)}\n//         onKeyPress={(e) => handleKeyPress(e, parentId)}\n//         className=\"p-1 border rounded mr-2 text-sm flex-grow\"\n//         placeholder=\"New item name\"\n//       />\n//       <button\n//         onClick={() => handleCreateItem(parentId)}\n//         className=\"p-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-300 mr-1\"\n//       >\n//         <File size={16} />\n//       </button>\n//       <button\n//         onClick={() => handleCreateItem(parentId, true)}\n//         className=\"p-1 bg-yellow-500 text-white rounded hover:bg-yellow-600 transition duration-300\"\n//       >\n//         <FolderPlus size={16} />\n//       </button>\n//     </div>\n//   );\n\n//   const renderTree = (items, parentId = 'root') => {\n//     // 递归地渲染文件和文件夹的层次结构\n//     if (items.length === 0 && parentId === 'root') {\n//       // 如果根节点没有子项，则显示新建项目的输入框\n//       return (\n//         <li key=\"new-item-input\" className=\"py-1\">\n//           {renderNewItemInput('root')}\n//         </li>\n//       );\n//     }\n\n//     // 对于每个项目，检查其类型是文件夹还是文件，并分别渲染相应的内容：\n//     // (1) 文件夹，渲染展开/折叠按钮和新建按钮；\n//     // (2) 文件，渲染选择和删除按钮\n//     return items.map((item) => (\n//       <li key={item.id} className=\"py-1\">\n//         {item.type === 'folder' ? (\n//           <div>\n//             <div className=\"flex items-center\">\n//               <div \n//                 className=\"flex items-center cursor-pointer flex-grow\" \n//                 onClick={() => toggleFolder(item.id)}\n//               >\n//                 <Folder size={16} className=\"mr-2 text-yellow-500\" />\n//                 <span className=\"text-gray-800\">{item.name}</span>\n//               </div>\n//               <button\n//                 onClick={() => setShowNewItemInput(prev => ({ ...prev, [item.id]: !prev[item.id] }))}\n//                 className=\"p-1 text-green-500 rounded hover:bg-green-100 transition duration-300 mr-1\"\n//               >\n//                 <PlusCircle size={16} />\n//               </button>\n//               {parentId !== 'root' && (\n//                 <button\n//                   onClick={() => onDeleteFile(item.id)}\n//                   className=\"p-1 text-red-500 rounded hover:bg-red-100 transition duration-300\"\n//                 >\n//                   <Trash2 size={16} />\n//                 </button>\n//               )}\n//             </div>\n//             {expandedFolders[item.id] && (\n//               <div className=\"ml-4 mt-2\">\n//                 {showNewItemInput[item.id] && renderNewItemInput(item.id)}\n//                 <ul className=\"pl-4\">\n//                   {item.children && item.children.length > 0 \n//                     ? renderTree(item.children, item.id)\n//                     : <li className=\"text-gray-500 italic\">Empty folder</li>\n//                   }\n//                 </ul>\n//               </div>\n//             )}\n//           </div>\n//         ) : (\n//           <div className={`flex items-center ${selectedFileId === item.id ? 'bg-blue-100' : ''}`}>\n//             <div \n//               className=\"flex items-center cursor-pointer flex-grow p-1 rounded\"\n//               onClick={() => onSelectFile(item)}\n//             >\n//               <File size={16} className=\"mr-2 text-blue-500\" />\n//               <span className=\"text-gray-800\">{item.name}</span>\n//             </div>\n//             <button\n//               onClick={() => onDeleteFile(item.id)}\n//               className=\"p-1 text-red-500 rounded hover:bg-red-100 transition duration-300\"\n//             >\n//               <Trash2 size={16} />\n//             </button>\n//           </div>\n//         )}\n//       </li>\n//     ));\n//   };\n\n//   return (\n//     <div className=\"file-tree\">\n//       <ul className=\"pl-4\">\n//         {renderTree(files)}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default FileTree;\n\n// FileTree.js\n\nimport React, { useState } from 'react';\nimport { Folder, File, PlusCircle, Trash2, FolderPlus } from 'lucide-react';\n\nconst FileTree = ({ files, onSelectFile, onCreateFile, onDeleteFile, selectedFileId }) => {\n  const [newItemName, setNewItemName] = useState('');\n  const [expandedFolders, setExpandedFolders] = useState(() => {\n    // Initialize expandedFolders from localStorage, defaulting to { root: true }\n    const stored = localStorage.getItem('expandedFolders');\n    return stored ? JSON.parse(stored) : { root: true };\n  });\n  const [showNewItemInput, setShowNewItemInput] = useState({ root: true });\n\n  const toggleFolder = (id) => {\n    setExpandedFolders(prev => {\n      const updated = { ...prev, [id]: !prev[id] };\n      // Persist expanded folders state to localStorage\n      localStorage.setItem('expandedFolders', JSON.stringify(updated));\n      return updated;\n    });\n  };\n\n  // ... (rest of the FileTree.js code remains the same)\n\n  return (\n    <div className=\"file-tree\">\n      <ul className=\"pl-4\">\n        {renderTree(files)}\n      </ul>\n    </div>\n  );\n};\n\nexport default FileTree;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,EAAEC,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAEC,UAAU,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5E,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,KAAK;EAAEC,YAAY;EAAEC,YAAY;EAAEC,YAAY;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACxF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACiB,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAC,MAAM;IAC3D;IACA,MAAMmB,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IACtD,OAAOF,MAAM,GAAGG,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,GAAG;MAAEK,IAAI,EAAE;IAAK,CAAC;EACrD,CAAC,CAAC;EACF,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG1B,QAAQ,CAAC;IAAEwB,IAAI,EAAE;EAAK,CAAC,CAAC;EAExE,MAAMG,YAAY,GAAIC,EAAE,IAAK;IAC3BV,kBAAkB,CAACW,IAAI,IAAI;MACzB,MAAMC,OAAO,GAAG;QAAE,GAAGD,IAAI;QAAE,CAACD,EAAE,GAAG,CAACC,IAAI,CAACD,EAAE;MAAE,CAAC;MAC5C;MACAR,YAAY,CAACW,OAAO,CAAC,iBAAiB,EAAET,IAAI,CAACU,SAAS,CAACF,OAAO,CAAC,CAAC;MAChE,OAAOA,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC;;EAED;;EAEA,oBACEvB,OAAA;IAAK0B,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxB3B,OAAA;MAAI0B,SAAS,EAAC,MAAM;MAAAC,QAAA,EACjBC,UAAU,CAAC1B,KAAK;IAAC;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACzB,EAAA,CA3BIN,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AA6Bd,eAAeA,QAAQ;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}